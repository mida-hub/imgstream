[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "imgstream"
version = "1.0.0"
description = "Modern photo management application"
authors = [{name = "ImgStream Team", email = "team@example.com"}]
license = "MIT"
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "streamlit>=1.28.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "pillow>=10.0.0",
    "duckdb>=0.9.0",
    "google-cloud-storage>=2.10.0",
    "google-cloud-run>=0.10.0",
    "google-auth>=2.23.0",
    "pyjwt>=2.8.0",
    "pydantic>=2.4.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.2.1",
    "httpx>=0.25.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "types-requests>=2.31.0",
    "types-pillow>=10.0.0",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 120

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "B904",  # raise from
    "I001",  # Import block is un-sorted or un-formatted (handled by isort)
    "E712",  # Avoid equality comparisons to `False` (common in tests)
    "E402",  # Module level import not at top of file (common in test setup)
    "W291",  # Trailing whitespace (handled by black)
]

[tool.ruff.lint.per-file-ignores]
# Test files can use print statements and have more relaxed rules
"tests/**/*.py" = [
    "T201",  # print found
    "S101",  # assert used
    "S105",  # hardcoded password (test data)
    "S106",  # hardcoded password (test data)
    "S107",  # hardcoded password (test data)
    "S603",  # subprocess call (legitimate in test runners)
    "B007",  # unused loop variable (common in tests)
    "F841",  # unused variable (test setup)
    "E722",  # bare except (test error handling)
    "S110",  # try-except-pass (test error handling)
    "B023",  # function definition in loop (test fixtures)
    "A002",  # argument shadows builtin (test parameters)
    "F401",  # unused import (test utilities)
]

# Security test files have additional exceptions
"tests/security/**/*.py" = [
    "S108",  # hardcoded temp file (test data)
    "S324",  # hashlib insecure hash (test data)
    "S506",  # yaml unsafe load (test data)
]

# Performance test files
"tests/performance/**/*.py" = [
    "T201",  # print statements for progress
]

# Scripts can use print statements
"scripts/**/*.py" = [
    "T201",  # print found
    "S603",  # subprocess call (legitimate in scripts)
]

[tool.ruff.lint.isort]
known-first-party = ["imgstream"]
force-single-line = true

# Black configuration
[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable
disallow_incomplete_defs = false  # Gradually enable
check_untyped_defs = true
disallow_untyped_decorators = false  # Gradually enable
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = false  # Disable unreachable warnings
strict_equality = true
exclude = [
    "src/imgstream/monitoring.py",
]

# Per-module options
[[tool.mypy.overrides]]
module = [
    "google.cloud.*",
    "streamlit.*",
    "PIL.*",
    "duckdb.*",
    "jwt.*",
    "uvicorn.*",
    "fastapi.*",
    "pydantic.*",
    "pytest.*",
    "pillow_heif.*",
]
ignore_missing_imports = true

# Monitoring module has specific type issues
[[tool.mypy.overrides]]
module = "src.imgstream.monitoring"
ignore_errors = true

[[tool.mypy.overrides]]
module = "imgstream.monitoring"
ignore_errors = true

# Test files have relaxed type checking
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
ignore_errors = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --ignore=tests/security --ignore=tests/e2e --ignore=tests/performance"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "security: marks tests as security tests",
    "performance: marks tests as performance tests",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:google.auth",
    "ignore::UserWarning:streamlit",
    "ignore::RuntimeWarning",
    "ignore::FutureWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
