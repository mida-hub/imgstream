name: Security Scan

on:
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
        
    - name: Install dependencies
      run: |
        uv sync --dev
        
    - name: Run Bandit security scan
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json
        uv run bandit -r src/ -f txt
      continue-on-error: true
        
    - name: Run Safety dependency scan
      run: |
        uv export --format requirements-txt --no-dev > requirements.txt
        uv run safety check --file requirements.txt --json --output safety-report.json
        uv run safety check --file requirements.txt
      continue-on-error: true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.json
          safety-report.json
          
    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## üîí Security Scan Results\n\n';
          
          // Read Bandit results
          try {
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            const highIssues = banditReport.results.filter(r => r.issue_severity === 'HIGH').length;
            const mediumIssues = banditReport.results.filter(r => r.issue_severity === 'MEDIUM').length;
            const lowIssues = banditReport.results.filter(r => r.issue_severity === 'LOW').length;
            
            comment += `### Bandit Static Analysis\n`;
            comment += `- üî¥ High: ${highIssues}\n`;
            comment += `- üü° Medium: ${mediumIssues}\n`;
            comment += `- üü¢ Low: ${lowIssues}\n\n`;
          } catch (e) {
            comment += `### Bandit Static Analysis\n‚ùå Failed to parse results\n\n`;
          }
          
          // Read Safety results
          try {
            const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            const vulnerabilities = safetyReport.vulnerabilities || [];
            
            comment += `### Safety Dependency Scan\n`;
            comment += `- üîç Vulnerabilities found: ${vulnerabilities.length}\n\n`;
            
            if (vulnerabilities.length > 0) {
              comment += `#### Vulnerable Dependencies:\n`;
              vulnerabilities.forEach(vuln => {
                comment += `- **${vuln.package_name}** ${vuln.analyzed_version}: ${vuln.vulnerability_id}\n`;
              });
            }
          } catch (e) {
            comment += `### Safety Dependency Scan\n‚ùå Failed to parse results\n\n`;
          }
          
          comment += `\nüìä Full reports are available in the workflow artifacts.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
