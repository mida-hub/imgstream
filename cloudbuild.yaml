# Enhanced Cloud Build configuration for imgstream
steps:
  # Install dependencies and run tests
  - name: 'python:3.11'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      pip install uv
      uv sync
      echo "Running unit tests..."
      uv run pytest tests/unit/ -v --tb=short --junitxml=test-results-unit.xml
      
      if [[ "${_ENVIRONMENT}" != "development" ]]; then
        echo "Running integration tests..."
        ENVIRONMENT=${_ENVIRONMENT} uv run pytest tests/integration/ -v --tb=short --junitxml=test-results-integration.xml
      fi
      
      if [[ "${_ENVIRONMENT}" == "production" ]]; then
        echo "Running security tests..."
        ENVIRONMENT=${_ENVIRONMENT} uv run pytest tests/security/ -v --tb=short --junitxml=test-results-security.xml
      fi

  # Code quality checks
  - name: 'python:3.11'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      pip install uv
      uv sync
      echo "Running code formatting check..."
      uv run black --check .
      echo "Running linting..."
      uv run ruff check .
      echo "Running type checking..."
      uv run mypy src/

  # Build the container image with enhanced metadata
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/imgstream:${_ENVIRONMENT}-$COMMIT_SHA',
      '-t', 'gcr.io/$PROJECT_ID/imgstream:${_ENVIRONMENT}-latest',
      '--build-arg', 'ENVIRONMENT=${_ENVIRONMENT}',
      '--build-arg', 'BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")',
      '--build-arg', 'VCS_REF=$COMMIT_SHA',
      '--build-arg', 'VERSION=${_VERSION}',
      '--label', 'environment=${_ENVIRONMENT}',
      '--label', 'commit=$COMMIT_SHA',
      '--label', 'build-date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")',
      '.'
    ]

  # Push the container images
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/imgstream:${_ENVIRONMENT}-$COMMIT_SHA']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/imgstream:${_ENVIRONMENT}-latest']

  # Security scan of the built image
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      echo "Running container security scan..."
      gcloud container images scan gcr.io/$PROJECT_ID/imgstream:${_ENVIRONMENT}-$COMMIT_SHA \
        --format='table(vulnerability.severity,vulnerability.cvss_score,package.name,version.name)' \
        --limit=50 || echo "Security scan completed with warnings"

  # Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args: [
      'run', 'deploy', 'imgstream-${_ENVIRONMENT}',
      '--image', 'gcr.io/$PROJECT_ID/imgstream:${_ENVIRONMENT}-$COMMIT_SHA',
      '--region', '${_REGION}',
      '--platform', 'managed',
      '--service-account', 'imgstream-cloud-run-${_ENVIRONMENT}@$PROJECT_ID.iam.gserviceaccount.com',
      '--no-allow-unauthenticated',
      '--memory', '${_MEMORY_LIMIT}',
      '--cpu', '${_CPU_LIMIT}',
      '--concurrency', '${_CONCURRENCY}',
      '--timeout', '300',
      '--max-instances', '${_MAX_INSTANCES}',
      '--min-instances', '${_MIN_INSTANCES}',
      '--set-env-vars', 'ENVIRONMENT=${_ENVIRONMENT},GOOGLE_CLOUD_PROJECT=$PROJECT_ID,GCP_REGION=${_REGION}',
      '--labels', 'environment=${_ENVIRONMENT},service=imgstream,version=${_VERSION}',
      '--quiet'
    ]

  # Health check and deployment verification
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      echo "Performing deployment verification..."
      SERVICE_URL=$(gcloud run services describe imgstream-${_ENVIRONMENT} --region=${_REGION} --format="value(status.url)")
      echo "Service deployed at: $SERVICE_URL"
      
      # Wait for service to be ready
      echo "Waiting for service to be ready..."
      sleep 30
      
      # Health check with retry
      for i in {1..10}; do
        if curl -f -s "$SERVICE_URL/health" > /dev/null 2>&1; then
          echo "‚úÖ Health check passed"
          break
        else
          echo "‚è≥ Health check failed, retrying... (attempt $i/10)"
          sleep 30
        fi
        
        if [ $i -eq 10 ]; then
          echo "‚ùå Health check failed after 10 attempts"
          exit 1
        fi
      done
      
      echo "üöÄ Deployment completed successfully!"

  # Cleanup old images (keep last 10 per environment)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      echo "Cleaning up old container images..."
      gcloud container images list-tags gcr.io/$PROJECT_ID/imgstream \
        --filter="tags:${_ENVIRONMENT}-*" \
        --format="get(digest)" \
        --limit=999 | tail -n +11 | \
      while read digest; do
        if [ -n "$digest" ]; then
          echo "Deleting old image: gcr.io/$PROJECT_ID/imgstream@$digest"
          gcloud container images delete "gcr.io/$PROJECT_ID/imgstream@$digest" --quiet || true
        fi
      done || echo "Cleanup completed"

# Substitution variables with environment-specific defaults
substitutions:
  _ENVIRONMENT: 'staging'
  _REGION: 'us-central1'
  _MEMORY_LIMIT: '1Gi'
  _CPU_LIMIT: '1000m'
  _CONCURRENCY: '100'
  _MAX_INSTANCES: '20'
  _MIN_INSTANCES: '1'
  _VERSION: 'latest'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  
# Build timeout
timeout: '1200s'  # 20 minutes

# Images to be pushed to Container Registry
images:
  - 'gcr.io/$PROJECT_ID/imgstream:${_ENVIRONMENT}-$COMMIT_SHA'
  - 'gcr.io/$PROJECT_ID/imgstream:${_ENVIRONMENT}-latest'
